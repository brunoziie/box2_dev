/**
 * Controller
 *
 * @class Box2.Controller
 * @constructor
 */
Box2.Controller = function(){
	var that = {};

	/**
	 * Models that will to be used by controller.
	 * @attribute uses
	 * @type Array
	 **/
	this.uses = [];

	/**
	 * Default layout
	 * @attribute layout
	 * @type String
	 **/
	this.layout = 'default';

	/**
	 * Helpers that will to be used by controller
	 * @attribute helpers
	 * @type Object
	 **/
	this.helpers = [];

	/**
	 * Data received via form post
	 * @attribute data
	 * @type Object
	 **/
	this.data = {};

	/**
	 * Controller params
	 * @attribute params
	 * @type Object
	 **/
	this.params = {};

	/**
	 * Output generated by view's render
	 * @attribute output
	 * @type {String}
	 */
	this.output = '';

	/**
	 * Variables for the views
	 * @private
	 * @attribute vars
	 * @type {Object}
	 */
	that.vars = {};

	// Constructor
	this.__construct = function(){
		this.Models = Box2.Models;
		this.Components = Box2.Components;
		this.View = new Box2.View();
		this.Helpers = Box2.Helpers;
		return this;
	};

	/**
	 * Set a variable for the view
	 *
	 * @method set
	 * @param {String} key   Variable name
	 * @param {Mixed}  value Value to variable
	 */
	this.set = function(key, value){
		that.vars[key] = value;
	};

	/**
	 * Get a variable from Controller.vars
	 *
	 * @method get
	 * @param  {String} key Object key
	 * @return void
	 */
	this.get = function(key){
		return that.vars[key] || null;
	}

	/**
	 * Clear the views vars
	 *
	 * @method clear
	 * @return void
	 */
	this.clear = function(){
		that.vars = {};
	};

	/**
	 * Redirect to page into application
	 *
	 * @method redirect
	 * @param {String} url Destination to redirect
	 **/
	this.redirect = function(url){
		Box2.History.removeLast();
		window.location.hash = '#' + url;
	};

	/**
	 * Render a view and put to output attribute
	 *
	 * @method render
	 * @param  {String} path View parh
	 * @return void
	 */
	this.render = function(path){
		var view = new Box2.View(), 
			htmlContent;

		view.layout = this.layout;
		that.output += view.render(path, that.vars);
	};

	/**
	 * Show the rendered views
	 *
	 * @method renderView
	 * @return void
	 */
	this.renderView = function(){
		var view = this.View,
			params = this.params,
			output;

		if(this.output == ''){
			output = view.render(params.controller+'/'+params.action, that.vars);
		}else{
			output = this.output;
		}

		view.layout = this.layout;
		document.getElementById('stage').innerHTML = view.renderLayout(output, that.vars);
	};

	// Call the constructor
	return this.__construct.apply(this, arguments);
};
